#+title: Avy configuration
#+author: xl666

* Basics
This document outlines an extended configuration of avy, focusing on
its =Act= elements as described in:
https://karthinks.com/software/avy-can-do-anything/

* Package loading and basic keybindings
- In this case I'm loading avy from the start
- I like goto-char-timer as the main default
- I like a quicker timeout (default is .5)
- I like to think that SPC is a =jump= key, as it springs more than
  the other keys, so I'm basing my keybindings on this idea in general
- The zap operation is the exception, I wanted to keep the original
  keybinding
- I'm also thinking in ergonomics, avy keybindings should be really
  quick to pull-of
  
#+begin_src emacs-lisp
  (require 'avy)
  (setq avy-timeout-seconds 0.25)
  (define-key global-map (kbd "H-SPC") 'avy-goto-char-timer)
  (bind-key* (kbd "<end>") 'avy-goto-char-timer)
  (define-key global-map (kbd "H-S-SPC") 'avy-pop-mark)
  (define-key global-map (kbd "M-z") 'avy-zap-up-to-char)
  (define-key global-map (kbd "M-SPC") 'avy-goto-end-of-line)
  (define-key global-map (kbd "M-S-SPC") 'avy-goto-line)
#+end_src

* Key sequence
- By default avy uses home row but it quickly becomes unpractical when
  there are several matches
- I prefer the whole alphabet including lower and upper cases

#+begin_src emacs-lisp
  (setq avy-keys (nconc (number-sequence ?a ?z)
                        (number-sequence ?A ?Z)))
#+end_src

* Custom actions
- I have to redefine all the keybindings for actions as by extending
  the avy alphabet the original keys are not available
- I'm introducing the use of C for that purpose, but it makes
  more difficult key assignment
- I'm only considering some of the original actions, as not all are
  really useful for me
  
** Original actions
- Official avy actions
#+begin_src emacs-lisp
  (setf (alist-get ?\C-y avy-dispatch-alist) 'avy-action-yank 
        (alist-get ?\M-w avy-dispatch-alist) 'avy-action-copy 
        (alist-get ?\C-k avy-dispatch-alist) 'avy-action-kill-move 
        (alist-get ?\C-t avy-dispatch-alist) 'avy-action-teleport)
#+end_src

** Base function actions
- For generic actions
- Like actions that only execute a command at point and stay
- This is useful for more complex actions

  #+begin_src emacs-lisp
    (defun avy-generic-command-action (action-f)
      "Excecutes action-f at point and stays"
      (save-excursion
        (goto-char pt)
        (funcall action-f))
      (select-window
       (cdr (ring-ref avy-ring 0)))
      t)

    (defun avy-generic-command-action-no-stay (action-f)
      "Excecutes action-f at point and returns to original position"
      (goto-char pt)
      (funcall action-f)
      t)
#+end_src


** Actions took from =Avy can do anything=
- I just took the few I liked 
  
#+begin_src emacs-lisp
  (defun avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char (+ 1 pt)))
  (setf (alist-get 67108896 avy-dispatch-alist) 'avy-action-mark-to-char) ; C-SPC

  (defun avy-action-helpful (pt)
    (avy-generic-command-action #'helpful-at-point))
  (setf (alist-get ?\C-h avy-dispatch-alist) 'avy-action-helpful)

  (defun avy-action-flyspell (pt)
    (avy-generic-command-action #'flyspell-auto-correct-word))
  (setf (alist-get ?\C-. avy-dispatch-alist) 'avy-action-flyspell)
#+end_src


** Simple new custom actions
- I added this myself
  
*** Open org link
- Only relevant for org files

#+begin_src emacs-lisp
  (defun avy-action-open-at-point (pt)
    (goto-char pt)
    (org-open-at-point)
    t)
  (setf (alist-get ?\C-o avy-dispatch-alist) 'avy-action-open-at-point)
#+end_src

*** Clone line below
- You can select a line, or any other character in the line
- It clones the line and adds the clone just below the original
- It jumps to the end of the cloned line
- I find this useful for config files

#+begin_src emacs-lisp
  (defun avy-action-clone-line (pt)
    (goto-char pt)
    (move-beginning-of-line 1)
    (cl-destructuring-bind (start . end)
        (bounds-of-thing-at-point 'line)
      (copy-region-as-kill start end))
    (yank)
    (indent-for-tab-command)
    t)
(setf (alist-get ?\C-l avy-dispatch-alist) 'avy-action-clone-line)
#+end_src


  
** Region actions
- The idea is to be able to act in arbitrary regions without the need
  of manually marking a region
- It relies on two basic operations:
  + First mark the beginning of the region with a set-point action
  + Then apply a region action selecting the end of the region
- Region actions are the same as [[*Original actions][Original actions]] but for regions
- Region actions take the original code of avy actions as much as possible
- A necessary hack is to simulate region selection instead of using
  direct functions like =copy-region-as-kill= as those functions do
  not allow to manipulate regions if parenthesis or other syntax
  elements are not balanced (this has a weird behavior in modes like
  emacs-lisp so I'm not sure if it is a syntax problem)

*** set-point action
- It uses the global var =my-avy-point=
- The global var is useful for detecting errors and trying to execute
  a region action only if the point was set before
- It uses =.= as keybinding
  
#+begin_src emacs-lisp
  (defun avy-action-mark-point (pt)
    "Sets a point for other commands"
    (setq my-avy-point pt)
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    (message "Point set!"))
  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-mark-point)
#+end_src

*** Common functions
- Functions used in various region actions
- So no code is repeated

#+begin_src emacs-lisp
  (defun avy--quick-mark-region (pt)
    "Intermediate function to mark regions, used in region actions"
    (when (> my-avy-point pt)
      (progn
        (setf aux pt)
        (setf pt my-avy-point)
        (setf my-avy-point aux)))
    (goto-char my-avy-point)
    (set-mark my-avy-point)
    (activate-mark)
    (goto-char (+ 1 pt))
    (setq my-avy-point nil))

  (defun avy--return-point-region-action ()
    "Makes sure that the point returns to its original place even if it is in another window"
    (let ((dat (ring-ref avy-ring 0)))
      (select-frame-set-input-focus
       (window-frame (cdr dat)))
      (select-window (cdr dat))
      (goto-char (car dat))))

  (defun avy--check-for-region-errors ()
    "Cheks if set point action was previously made, cleans action otherwise"
    (progn (message "No point set") 
           (avy--return-point-region-action)
           nil))
#+end_src


*** Region actions

#+begin_src emacs-lisp
  (defun avy-action-copy-region (pt)
    "Copy region and stays"
    (if my-avy-point
        (progn 
          (save-excursion
            (avy--quick-mark-region pt)
            (call-interactively 'kill-ring-save))
          (avy--return-point-region-action)
          (message "Copied: %s" (current-kill 0))
          t)
      (avy--check-for-region-errors)))
  (setf (alist-get ?\M-W avy-dispatch-alist) 'avy-action-copy-region)

  (defun avy-action-yank-region (pt)
    "Yank region and stays"
    (avy-action-copy-region pt)
    (yank)
    t)
  (setf (alist-get 33554457 avy-dispatch-alist) 'avy-action-yank-region) ; C-Y

  (defun avy-action-kill-region-move (pt)
    "Kills a region and moves"
    (if my-avy-point
        (progn 
          (avy--quick-mark-region pt)
          (call-interactively 'kill-region)	     
          (message "Killed: %s" (current-kill 0))
          (point)
          t)
      (avy--check-for-region-errors)))
  (setf (alist-get 33554443 avy-dispatch-alist) 'avy-action-kill-region-move) ; C-K

  (defun avy-action-teleport-region (pt)
    "Teleports an arbitrary region using my-avy-point"
    (if my-avy-point
      (progn
        (save-excursion
          (avy--quick-mark-region pt)
          (call-interactively 'kill-region))
        (select-window
         (cdr
          (ring-ref avy-ring 0)))
        (yank)
        t)
      (avy--check-for-region-errors)))
  (setf (alist-get 33554452 avy-dispatch-alist) 'avy-action-teleport-region) ; C-T
#+end_src

** Quick char actions
- For some modes it is useful to have a shortcut for a common
  character, for example parenthesis in emacs-lisp

*** Basic function
#+begin_src emacs-lisp
  (defun avy-goto-quick-char (char &optional arg)
    "Simulates char press for filtering"
    (interactive (list char
                       current-prefix-arg))
    (avy-with avy-goto-char
      (avy-jump
     
       (regexp-quote (string char)))))
#+end_src

*** emacs-lisp mode
- My quick char is open parenthesis

#+begin_src emacs-lisp
  (defun avy-goto-parenthesis ()
    "Filter avy selecton with open parenthesis"
    (interactive)
    (avy-goto-quick-char 40)) ;; (
  (define-key emacs-lisp-mode-map (kbd "S-SPC") 'avy-goto-parenthesis)
#+end_src
  
** Auto Actions and  compounds
- Automatically execute an arbitrary action when choosing a candidate
- Useful for creating compounds, i.e; strings of avy interactions in
  a single command
- This exploits a somewhat hidden feature of avy called =preactions=
- A =preaction= is an action that executes before  an avy action
- An important difference between an action and preaction is that
  preactions are not returned to default value after an avy interaction, so
  you have to unset a preaction when isn't needed anymore
- Another problem is when cancelling a command with an auto action, as
  the auto action is not unset, for this, function advice is added

*** General 
- Generic functions
- Interruptions are not easily managed, ideally an advice should be
  added to the function call when doing C-g inside =read-char=, but this
  cannot be done as that function call is not mapped to an elisp
  function but most likely is hardcoded in C
   

#+begin_src emacs-lisp 
  (defun avy-set-auto-action (res action)
    "Sets an auto action to excecute on the next avy interaction, it is necessary to unset afterwards if not longer desired
  res param is needed for default behavior"
    (avy-pre-action-default res)
    (setq avy-action action))

  (defun avy-unset-auto-action ()
    "Unsets an auto action"
    (setq avy-pre-action 'avy-pre-action-default))

  (setq processing-compound? nil)
  (setq avy-interrupted? nil)

  (defun clean-avy-auto-action ()
    "Resets default  avy preaction and compound flag"
    (avy-unset-auto-action)
    (setq processing-compound? nil))

  (defun avy-intial-interruption-check (&optional arg)
    "Function to run before avy command to check if the last action was interrupted"
    (if avy-interrupted?
        (progn
          (clean-avy-auto-action))
      (setq avy-interrupted? t)))

  (defun avy-set-no-interruption (&optional arg)
    "Function to run after avy command to state that there were no interruption"
    (setq avy-interrupted? nil))

  (advice-add 'avy-goto-char-timer :before #'avy-intial-interruption-check)
  (advice-add 'avy-goto-char-timer :after #'avy-set-no-interruption)


#+end_src

*** Region-compound
- Consists of two avy interactions
- Auto applies mark point action for region actions
- After that it can apply a desired region action
- Some checking can be done for having cleaning interruptions
- Overriding proxy actions are added so no new key mappings are added for region actions

#+begin_src emacs-lisp
  (defun avy-auto-set-point-preaction (res)
    "Preaction for setting the point as part of a region action"
    (avy-set-auto-action res 'avy-action-mark-point))


  (defun avy-region-compound ()
    "Compound for manipulating regions"
    (interactive)
    (setq processing-compound? t)
    (setq avy-pre-action 'avy-auto-set-point-preaction)
    (when (call-interactively 'avy-goto-char-timer) ; nil if interrupted
      (avy-unset-auto-action)
      (call-interactively 'avy-goto-char-timer))
    (clean-avy-auto-action))

   (define-key global-map (kbd "C-H-SPC") 'avy-region-compound)

  (defun avy-action-yank-proxy (pt)
    "Applies regular or region based yank"
    (if processing-compound?
        (avy-action-yank-region pt)
      (avy-action-yank pt)))

  (setf (alist-get ?\C-y avy-dispatch-alist) 'avy-action-yank-proxy) ; override

  (defun avy-action-kill-proxy (pt)
    "Applies regular or region based kill"
    (if processing-compound?
        (avy-action-kill-region-move pt)
      (avy-action-kill-move pt)))

  (setf (alist-get ?\C-k avy-dispatch-alist) 'avy-action-kill-proxy)

  (defun avy-action-teleport-proxy (pt)
    "Applies regular or region based teleport"
    (if processing-compound?
        (avy-action-teleport-region pt)
      (avy-action-teleport pt)))

  (setf (alist-get ?\C-t avy-dispatch-alist) 'avy-action-teleport-proxy)

  (defun avy-action-copy-proxy (pt)
    "Applies regular or region based copy"
    (if processing-compound?
        (avy-action-copy-region pt)
      (avy-action-copy pt)))

  (setf (alist-get ?\M-w avy-dispatch-alist) 'avy-action-copy-proxy)
#+end_src

*** Replace compound
- Combines kill and yank
- I found myself constantly doing this two operations in tandem
- Does not work for region actions (I didn't needed and I'm lazy to
  adapt it)
- Tries to return the point to its original position

#+begin_src emacs-lisp 
  (defun avy-auto-yank-preaction (res)
    "Preaction for yanking"
    (avy-set-auto-action res 'avy-action-yank))

  (defun avy-replace-action (pt)
    "Compound action for replacing a candidate with another candidate"
    (avy-action-kill-move pt)
    (setq avy-pre-action 'avy-auto-yank-preaction)
    (setq avy-interrupted? nil) ; next goto-char cleans
    (call-interactively 'avy-goto-char-timer)
    (clean-avy-auto-action)
    (call-interactively 'avy-pop-mark)
    (call-interactively 'avy-pop-mark))

  (setf (alist-get ?\C-r avy-dispatch-alist) 'avy-replace-action)
#+end_src
  

** LSP actions
- Shortcuts for most convenient actions
- I'm using H as the main modifier

#+begin_src emacs-lisp
  (defun avy-action-lsp-help (pt)
    (avy-generic-command-action #'lsp-describe-thing-at-point))
  (setf (alist-get 16777320 avy-dispatch-alist) 'avy-action-lsp-help) ; H-h

  (defun avy-action-lsp-goto-definition (pt)
    (avy-generic-command-action-no-stay #'lsp-find-definition))
  (setf (alist-get 16777319 avy-dispatch-alist) 'avy-action-lsp-goto-definition) ; H-g

  (defun avy-action-lsp-goto-references (pt)
    (avy-generic-command-action-no-stay #'lsp-find-references))
  (setf (alist-get 16777336 avy-dispatch-alist) 'avy-action-lsp-goto-references) ; H-x

  (defun avy-action-lsp-rename (pt)
    (avy-generic-command-action
     (lambda () (call-interactively 'lsp-rename))))
  (setf (alist-get 16777330 avy-dispatch-alist) 'avy-action-lsp-rename) ; H-r
#+end_src


